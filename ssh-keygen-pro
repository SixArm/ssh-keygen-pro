#!/bin/bash
set -euf -o pipefail

##
# SSH keygen helper script to generate professional-quality keys.
#
# Syntax:
#
#     ssh-keygen-pro
#       [user_identifier]
#       [unique_identifier]
#       [algortihm_identifier]
#
# Example using prompts:
#
#     ssh-keygen-pro
#
# Example using option of user identifier:
#
#     ssh-keygen-pro alice@exmaple.com ce8382f1cf6fddd5d4615a614c946006 
#
# Example using option of unique identifier:
#
#     ssh-keygen-pro alice@exmaple.com ce8382f1cf6fddd5d4615a614c946006 
#
# Example using option of RSA algorithm:
#
#     ssh-keygen-pro alice@exmaple.com ce8382f1cf6fddd5d4615a614c946006 rsa
#
# The output is two keys:
#
#   * A new key with a passphrase, suitable for manual use
#
#   * A new key without a passphrase, suitable for automation use
#
# Each key has a public key file and private key file.
#
#
# ## Details
#
# Typical settings:
#
#   * The user identifer is your email address e.g. "alice@example.com"
#
#   * The unique identifer is a ZID e.g. "8af247255f409533f43c14cae2c07b97"
#
#   * The algorithm identifer is either the default "ed25519" or "rsa".
#
# Output file name convention:
#
#   * user=unique=ssh-id-ed25519-with-automation
#
#   * user=unique=ssh-id-ed25519-with-automation.pub
#
#   * user=unique=ssh-id-ed25519-with-passphrase
#
#   * user=unique=ssh-id-ed25519-with-passphrase.pub
#
# Output file name examples:
#
#   * alice@example.com=8af247255f409533f43c14cae2c07b97ssh-id-ed25519-with-automation
#
#   * alice@example.com=8af247255f409533f43c14cae2c07b97ssh-id-ed25519-with-automation.pub
#
#   * alice@example.com=8af247255f409533f43c14cae2c07b97ssh-id-ed25519-with-passphrase
#
#   * alice@example.com=8af247255f409533f43c14cae2c07b97ssh-id-ed25519-with-passphrase.pub
#
#
# ## Reasoning
#
# SSH options:
#
#   * Type: prefer the Ed25519 algorithm because it's the most secure,
#     and also allow the RSA algorithm because it's necessary for some
#     purposes such as connecting to Amazon Web Services key pairs.
#
#   * Bits: If RSA, then use 4096 bits because it's stronger than default 2048.
#
#   * Generate two keys: one with automation (i.e. without a passphrase)
#     and one with passphrase.
#
# Inputs:
#
#   * Use the user identifier (typically an email address), 
#     so a user's files will sort together alphabetically.
#
#   * Generate an ZID, akin to a UUID4, with only lowercase hex characters.
#
# Output file name convention:
#
#   * Separate items by using an equal sign, because it's not in email adddresses.
#
#
# ## ssh-keygen args
#
# The ssh-keygen args that we use:
#
#   * -o : Save the private-key using the new OpenSSH format rather than
#          the PEM format. This option is implied if you choose "ed25519".
#
#   * -a: It’s the numbers of KDF (Key Derivation Function) rounds. Higher
#         numbers result in slower passphrase verification, increasing the
#         resistance to brute-force password cracking of the private-key.
#
#   * -t: Specifies the type of key to create, such as "ed25519" or "rsa".
#
#   * -f: Specify the filename of the generated key file. If you want the
#         key to be discovered automatically by the SSH agent, then the
#         key must be stored in your default `~/.ssh` directory.
#
#   * -C: An option to specify a comment. It’s purely informational and
#         can be anything. It usually says who generated the key.
#
#
# ## About Ed25519
#
# See https://medium.com/risan/upgrade-your-ssh-key-to-ed25519-c6e8d60d3c54
#
# The Ed25519 was introduced on OpenSSH version 6.5. It’s the EdDSA implementation
# using the Twisted Edwards curve. It uses elliptic curve cryptography that offers
# better security with faster performance compared to DSA or ECDSA.
#
# Today, the RSA is the most widely used public-key algorithm for SSH key.
# But compared to Ed25519, RSA slower and even considered not safe if it’s
# generated with the key smaller than 2048-bit length.
#
# The Ed25519 public-key is compact. It only contains 68 characters, compared
# to RSA 3072 that has 544 characters. Generating the key is also almost as fast
# as the signing process. It’s also fast to perform batch signature verification
# with Ed25519. It’s built to be collision resilence. Hash-function collision
# won’t break the system.
#
#
# ## Tracking
#
#   * Command: ssh-keygen-pro
#   * Version: 5.0.0
#   * Created: 2015-12-20 or earlier
#   * Updated: 2020-03-26
#   * License: GPL
#   * Contact: Joel Parker Henderson (joel@joelparkerhenderson.com)
##
set -euf

## Get the user identifer by using arg or prompt
if [ "$#" -gt 0 ]; then
    email="$1"; shift
else
    default="example@example.com"
    printf "User identifier, such as an email addresss?\n"
    printf "Default: $default\n"
    read email
    [ -z "${email}" ] && email="$default"
fi

## Get the unique identifer by using arg or prompt
if [ "$#" -gt -0 ]; then
    zid="$1"; shift
else
    default=$(hexdump -n 16 -v -e '16/1 "%02x" "\n"' /dev/urandom)
    printf "Unique identifier, such as a ZID?\n"
    printf "Default: $default\n"
    read zid
    [ -z "${zid}" ] && zid="$default"    
fi

## Get the algorithm by using arg or prompt
if [ "$#" -gt -0 ]; then
    algo="$1"; shift
else
    default="ed25519"
    printf "Algorithm, such as ed25519 or rsa\n"
    printf "Default: $default\n"
    read algo
    [ -z "${algo}" ] && algo="$default"
fi

case "$algo" in
    "ed25519")
	algo_args="-t ed25519 -a 100"
	;;
    "rsa")
	algo_args="-t rsa -b 4096"
	;;
    *)
	printf "Algorithm not recognized: $algo"
	exit 1
	;;
esac
      
   
## Generate a key with a passphrase
naming="$email=$zid=ssh-$algo-with-passphrase"
ssh-keygen $algo_args -C "$naming" -f "$naming" "$@"
echo $naming; echo $naming.pub

## Generate a key without a passphrase suitable for automation
naming="$email=$zid=ssh-$algo-with-automation"
ssh-keygen $algo_args -C "$naming" -f "$naming" -N "" "$@"
echo $naming; echo $naming.pub
